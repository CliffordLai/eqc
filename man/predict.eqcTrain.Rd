% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eqcTrain.R
\name{predict.eqcTrain}
\alias{predict.eqcTrain}
\title{Predict Method for eqcTrain}
\usage{
\method{predict}{eqcTrain}(object, newdata, type = c("class",
  "probability"), ...)
}
\arguments{
\item{object}{Object of class "eqcTrain", created by \code{\link{eqcTrain}}.}

\item{newdata}{A matrix of \code{p} columns in which to look for variables with which to predict.}

\item{type}{Type of prediction required, there are two options "class" or "probability.
Default is the predicted class label.}

\item{...}{Passing arguments to \code{\link[glmnet]{predict.glmnet}} or \code{\link[e1071]{predict.svm}}
depending on the ensemble method used by \code{object}.}
}
\value{
A list where each component contains the return values of
prediction methods applied on the quantile-transformed \code{newdata} with respect to each
row of \code{thetaList} of \code{object}.
}
\description{
Predict Method for eqcTrain
}
\examples{
# Divide data into training set and test set randomly
data(wdbc)
set.seed(193)
trainIndex <- sample(c(rep(TRUE,2),rep(FALSE,1)),nrow(wdbc),replace=TRUE)
train <- as.matrix(wdbc[trainIndex,-1])
cl.train <- wdbc[trainIndex,1]
test <- as.matrix(wdbc[!trainIndex,-1])
cl.test <- wdbc[!trainIndex,1]
p <- ncol(train)

# Tuning parameters
thetaList <- rbind(rep(0.3,p),rep(0.4,p),rep(0.5,p))

# Fit the tuned EQC (QC)
fit1 <- eqcTrain(train,cl.train,
                 thetaList=thetaList,
                 method = "qc",
                 tuneControl = list(nfolds=5,fold.seed=117))

# Prediction on the test set
pred1 <- predict(fit1,newdata = test,type = "class")[[1]]


}
